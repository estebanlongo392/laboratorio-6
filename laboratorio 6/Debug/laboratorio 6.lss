
laboratorio 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  000006c4  00000758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008001de  008001de  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5e  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b3  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000405  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ca  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000025d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3d       	cpi	r26, 0xDE	; 222
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ed       	ldi	r26, 0xDE	; 222
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3e       	cpi	r26, 0xE5	; 229
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  9e:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
}

void initUART9600(void)
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  da:	08 95       	ret

000000dc <initADC>:
	
}


void initADC(){
	ADMUX = 6;
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);  //Referencia AVCC = 5V
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1); //Justificación a la izquierda
  ea:	80 81       	ld	r24, Z
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);
  f0:	80 81       	ld	r24, Z
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	80 83       	st	Z, r24
	ADCSRA = 0;
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE);  //Habilitando interrupcion de ADC
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
 102:	80 81       	ld	r24, Z
 104:	87 60       	ori	r24, 0x07	; 7
 106:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);   //Habilitando el ADC
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_21>:




ISR(ADC_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	dato = ADCH;   //Contador general
 120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <dato>
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 142:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 146:	95 ff       	sbrs	r25, 5
 148:	fc cf       	rjmp	.-8      	; 0x142 <writeUART>
		UDR0 = Caracter;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14e:	08 95       	ret

00000150 <writeTextUART>:
		
}

 //Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 150:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	07 c0       	rjmp	.+14     	; 0x164 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 156:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15a:	95 ff       	sbrs	r25, 5
 15c:	fc cf       	rjmp	.-8      	; 0x156 <writeTextUART+0x6>
			UDR0 = Texto[o];
 15e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

 //Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	fa 01       	movw	r30, r20
 166:	e2 0f       	add	r30, r18
 168:	f1 1d       	adc	r31, r1
 16a:	30 81       	ld	r19, Z
 16c:	31 11       	cpse	r19, r1
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
			UDR0 = Texto[o];
	}
}
 170:	08 95       	ret

00000172 <main>:
volatile uint8_t  datoTX;
volatile char receivedChar = 0;


int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	2a 97       	sbiw	r28, 0x0a	; 10
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b00111111;  //Salida hacia LEDs  PB0 a PB5
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	84 b9       	out	0x04, r24	; 4
		
	initADC();
 18a:	0e 94 6e 00 	call	0xdc	; 0xdc <initADC>
	initUART9600();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	
	sei(); 
 192:	78 94       	sei
	
	
	while (1)
	{
	//************MENU*********************************
	if(activa == 0){
 194:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <activa>
 198:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <activa+0x1>
 19c:	89 2b       	or	r24, r25
 19e:	59 f5       	brne	.+86     	; 0x1f6 <main+0x84>
	writeTextUART("\n\r**************Menu****************"); 
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeTextUART("\n\r*******Ingrese un valor****************");    //Mostrar inicio 
 1a8:	85 e2       	ldi	r24, 0x25	; 37
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeUART(10);
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(13);
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(10);
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeTextUART("          Coloque 1 para leer potenciometro");   //Mostrar inicio
 1c2:	8f e4       	ldi	r24, 0x4F	; 79
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeUART(10);
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(13);
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeTextUART("          Coloque 2 para enviar ASCII\n\r");   //Mostrar inicio
 1d6:	8b e7       	ldi	r24, 0x7B	; 123
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeUART(10);
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(13);
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	activa = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <activa+0x1>
 1f2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <activa>
	}
	
	if(receivedChar != 0){
 1f6:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
 1fa:	88 23       	and	r24, r24
 1fc:	59 f2       	breq	.-106    	; 0x194 <main+0x22>
		switch(receivedChar)
 1fe:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
 202:	81 33       	cpi	r24, 0x31	; 49
 204:	19 f0       	breq	.+6      	; 0x20c <main+0x9a>
 206:	82 33       	cpi	r24, 0x32	; 50
 208:	e9 f1       	breq	.+122    	; 0x284 <main+0x112>
 20a:	c4 cf       	rjmp	.-120    	; 0x194 <main+0x22>
		{
			case '1':
			writeTextUART("Lectura actual de potenciometro es: ");
 20c:	83 ea       	ldi	r24, 0xA3	; 163
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			ADCSRA |= (1 << ADSC);   //Leer puerto de ADC
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
			uint16_t valor_decimal = (ADC * 5.0 / 1023.0) * 100; // Convertir a decimal
 21e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 222:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 30 02 	call	0x460	; 0x460 <__floatunsisf>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	40 ea       	ldi	r20, 0xA0	; 160
 234:	50 e4       	ldi	r21, 0x40	; 64
 236:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 ec       	ldi	r19, 0xC0	; 192
 23e:	4f e7       	ldi	r20, 0x7F	; 127
 240:	54 e4       	ldi	r21, 0x44	; 68
 242:	0e 94 8f 01 	call	0x31e	; 0x31e <__divsf3>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	48 ec       	ldi	r20, 0xC8	; 200
 24c:	52 e4       	ldi	r21, 0x42	; 66
 24e:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsf3>
 252:	0e 94 01 02 	call	0x402	; 0x402 <__fixunssfsi>
 256:	dc 01       	movw	r26, r24
 258:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 25a:	4a e0       	ldi	r20, 0x0A	; 10
 25c:	be 01       	movw	r22, r28
 25e:	6f 5f       	subi	r22, 0xFF	; 255
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	0e 94 2b 03 	call	0x656	; 0x656 <__itoa_ncheck>
			char buffer[10];
			itoa(valor_decimal, buffer, 10); // Convertir a cadena de caracteres
			writeTextUART(buffer);
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			writeTextUART("\n\r");
 26e:	80 ea       	ldi	r24, 0xA0	; 160
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			activa = 0;
 276:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <activa+0x1>
 27a:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <activa>
			receivedChar = 0;
 27e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__data_end>
			break;
 282:	88 cf       	rjmp	.-240    	; 0x194 <main+0x22>
			
			case '2':
			receivedChar = 0;
 284:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <__data_end>
			writeTextUART("\n\rIngrese un valor\n\r");
 288:	88 ec       	ldi	r24, 0xC8	; 200
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			activa2 = 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <activa2+0x1>
 298:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <activa2>
			break;
 29c:	7b cf       	rjmp	.-266    	; 0x194 <main+0x22>

0000029e <__vector_18>:
			UDR0 = Texto[o];
	}
}

ISR(USART_RX_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
	receivedChar = UDR0; // Almacena el carácter recibido
 2b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2b4:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__data_end>
	
	if (activa2 == 1){
 2b8:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <activa2>
 2bc:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <activa2+0x1>
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	e1 f4       	brne	.+56     	; 0x2fc <__vector_18+0x5e>
		// Dividir el carácter recibido en dos partes
		uint8_t lower_bits = receivedChar & 0b00111111; // Los 6 bits menos significativos
 2c4:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <__data_end>
 2c8:	2f 73       	andi	r18, 0x3F	; 63
		uint8_t upper_bits = (receivedChar >> 6) & 0b11; // Los 2 bits más significativos
 2ca:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
 2ce:	98 2f       	mov	r25, r24
 2d0:	92 95       	swap	r25
 2d2:	96 95       	lsr	r25
 2d4:	96 95       	lsr	r25
 2d6:	93 70       	andi	r25, 0x03	; 3

		// Mostrar los 6 bits menos significativos en PORTB
		PORTB = lower_bits;
 2d8:	25 b9       	out	0x05, r18	; 5

		// Mostrar los 2 bits más significativos en los pines PD6 y PD7 de PORTD
		PORTD = (PORTD & ~0b11000000) | (upper_bits << 6);
 2da:	2b b1       	in	r18, 0x0b	; 11
 2dc:	30 e4       	ldi	r19, 0x40	; 64
 2de:	93 9f       	mul	r25, r19
 2e0:	c0 01       	movw	r24, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	92 2f       	mov	r25, r18
 2e6:	9f 73       	andi	r25, 0x3F	; 63
 2e8:	89 2b       	or	r24, r25
 2ea:	8b b9       	out	0x0b, r24	; 11
		activa2 = 0;
 2ec:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <activa2+0x1>
 2f0:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <activa2>
		activa = 0;
 2f4:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <activa+0x1>
 2f8:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <activa>
	}
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 2fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 300:	85 ff       	sbrs	r24, 5
 302:	fc cf       	rjmp	.-8      	; 0x2fc <__vector_18+0x5e>
		UDR0 = receivedChar;
 304:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <__data_end>
 308:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	

}
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__divsf3>:
 31e:	0e 94 a3 01 	call	0x346	; 0x346 <__divsf3x>
 322:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_round>
 326:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscB>
 32a:	58 f0       	brcs	.+22     	; 0x342 <__divsf3+0x24>
 32c:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscA>
 330:	40 f0       	brcs	.+16     	; 0x342 <__divsf3+0x24>
 332:	29 f4       	brne	.+10     	; 0x33e <__divsf3+0x20>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	29 f0       	breq	.+10     	; 0x342 <__divsf3+0x24>
 338:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 33c:	51 11       	cpse	r21, r1
 33e:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 342:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_nan>

00000346 <__divsf3x>:
 346:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
 34a:	68 f3       	brcs	.-38     	; 0x326 <__divsf3+0x8>

0000034c <__divsf3_pse>:
 34c:	99 23       	and	r25, r25
 34e:	b1 f3       	breq	.-20     	; 0x33c <__divsf3+0x1e>
 350:	55 23       	and	r21, r21
 352:	91 f3       	breq	.-28     	; 0x338 <__divsf3+0x1a>
 354:	95 1b       	sub	r25, r21
 356:	55 0b       	sbc	r21, r21
 358:	bb 27       	eor	r27, r27
 35a:	aa 27       	eor	r26, r26
 35c:	62 17       	cp	r22, r18
 35e:	73 07       	cpc	r23, r19
 360:	84 07       	cpc	r24, r20
 362:	38 f0       	brcs	.+14     	; 0x372 <__divsf3_pse+0x26>
 364:	9f 5f       	subi	r25, 0xFF	; 255
 366:	5f 4f       	sbci	r21, 0xFF	; 255
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	44 1f       	adc	r20, r20
 36e:	aa 1f       	adc	r26, r26
 370:	a9 f3       	breq	.-22     	; 0x35c <__divsf3_pse+0x10>
 372:	35 d0       	rcall	.+106    	; 0x3de <__divsf3_pse+0x92>
 374:	0e 2e       	mov	r0, r30
 376:	3a f0       	brmi	.+14     	; 0x386 <__divsf3_pse+0x3a>
 378:	e0 e8       	ldi	r30, 0x80	; 128
 37a:	32 d0       	rcall	.+100    	; 0x3e0 <__divsf3_pse+0x94>
 37c:	91 50       	subi	r25, 0x01	; 1
 37e:	50 40       	sbci	r21, 0x00	; 0
 380:	e6 95       	lsr	r30
 382:	00 1c       	adc	r0, r0
 384:	ca f7       	brpl	.-14     	; 0x378 <__divsf3_pse+0x2c>
 386:	2b d0       	rcall	.+86     	; 0x3de <__divsf3_pse+0x92>
 388:	fe 2f       	mov	r31, r30
 38a:	29 d0       	rcall	.+82     	; 0x3de <__divsf3_pse+0x92>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	bb 1f       	adc	r27, r27
 394:	26 17       	cp	r18, r22
 396:	37 07       	cpc	r19, r23
 398:	48 07       	cpc	r20, r24
 39a:	ab 07       	cpc	r26, r27
 39c:	b0 e8       	ldi	r27, 0x80	; 128
 39e:	09 f0       	breq	.+2      	; 0x3a2 <__divsf3_pse+0x56>
 3a0:	bb 0b       	sbc	r27, r27
 3a2:	80 2d       	mov	r24, r0
 3a4:	bf 01       	movw	r22, r30
 3a6:	ff 27       	eor	r31, r31
 3a8:	93 58       	subi	r25, 0x83	; 131
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	3a f0       	brmi	.+14     	; 0x3bc <__divsf3_pse+0x70>
 3ae:	9e 3f       	cpi	r25, 0xFE	; 254
 3b0:	51 05       	cpc	r21, r1
 3b2:	78 f0       	brcs	.+30     	; 0x3d2 <__divsf3_pse+0x86>
 3b4:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 3b8:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 3bc:	5f 3f       	cpi	r21, 0xFF	; 255
 3be:	e4 f3       	brlt	.-8      	; 0x3b8 <__divsf3_pse+0x6c>
 3c0:	98 3e       	cpi	r25, 0xE8	; 232
 3c2:	d4 f3       	brlt	.-12     	; 0x3b8 <__divsf3_pse+0x6c>
 3c4:	86 95       	lsr	r24
 3c6:	77 95       	ror	r23
 3c8:	67 95       	ror	r22
 3ca:	b7 95       	ror	r27
 3cc:	f7 95       	ror	r31
 3ce:	9f 5f       	subi	r25, 0xFF	; 255
 3d0:	c9 f7       	brne	.-14     	; 0x3c4 <__divsf3_pse+0x78>
 3d2:	88 0f       	add	r24, r24
 3d4:	91 1d       	adc	r25, r1
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	97 f9       	bld	r25, 7
 3dc:	08 95       	ret
 3de:	e1 e0       	ldi	r30, 0x01	; 1
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	bb 1f       	adc	r27, r27
 3e8:	62 17       	cp	r22, r18
 3ea:	73 07       	cpc	r23, r19
 3ec:	84 07       	cpc	r24, r20
 3ee:	ba 07       	cpc	r27, r26
 3f0:	20 f0       	brcs	.+8      	; 0x3fa <__divsf3_pse+0xae>
 3f2:	62 1b       	sub	r22, r18
 3f4:	73 0b       	sbc	r23, r19
 3f6:	84 0b       	sbc	r24, r20
 3f8:	ba 0b       	sbc	r27, r26
 3fa:	ee 1f       	adc	r30, r30
 3fc:	88 f7       	brcc	.-30     	; 0x3e0 <__divsf3_pse+0x94>
 3fe:	e0 95       	com	r30
 400:	08 95       	ret

00000402 <__fixunssfsi>:
 402:	0e 94 9d 02 	call	0x53a	; 0x53a <__fp_splitA>
 406:	88 f0       	brcs	.+34     	; 0x42a <__fixunssfsi+0x28>
 408:	9f 57       	subi	r25, 0x7F	; 127
 40a:	98 f0       	brcs	.+38     	; 0x432 <__fixunssfsi+0x30>
 40c:	b9 2f       	mov	r27, r25
 40e:	99 27       	eor	r25, r25
 410:	b7 51       	subi	r27, 0x17	; 23
 412:	b0 f0       	brcs	.+44     	; 0x440 <__fixunssfsi+0x3e>
 414:	e1 f0       	breq	.+56     	; 0x44e <__fixunssfsi+0x4c>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a f0       	brmi	.+6      	; 0x426 <__fixunssfsi+0x24>
 420:	ba 95       	dec	r27
 422:	c9 f7       	brne	.-14     	; 0x416 <__fixunssfsi+0x14>
 424:	14 c0       	rjmp	.+40     	; 0x44e <__fixunssfsi+0x4c>
 426:	b1 30       	cpi	r27, 0x01	; 1
 428:	91 f0       	breq	.+36     	; 0x44e <__fixunssfsi+0x4c>
 42a:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_zero>
 42e:	b1 e0       	ldi	r27, 0x01	; 1
 430:	08 95       	ret
 432:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_zero>
 436:	67 2f       	mov	r22, r23
 438:	78 2f       	mov	r23, r24
 43a:	88 27       	eor	r24, r24
 43c:	b8 5f       	subi	r27, 0xF8	; 248
 43e:	39 f0       	breq	.+14     	; 0x44e <__fixunssfsi+0x4c>
 440:	b9 3f       	cpi	r27, 0xF9	; 249
 442:	cc f3       	brlt	.-14     	; 0x436 <__fixunssfsi+0x34>
 444:	86 95       	lsr	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b3 95       	inc	r27
 44c:	d9 f7       	brne	.-10     	; 0x444 <__fixunssfsi+0x42>
 44e:	3e f4       	brtc	.+14     	; 0x45e <__fixunssfsi+0x5c>
 450:	90 95       	com	r25
 452:	80 95       	com	r24
 454:	70 95       	com	r23
 456:	61 95       	neg	r22
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__floatunsisf>:
 460:	e8 94       	clt
 462:	09 c0       	rjmp	.+18     	; 0x476 <__floatsisf+0x12>

00000464 <__floatsisf>:
 464:	97 fb       	bst	r25, 7
 466:	3e f4       	brtc	.+14     	; 0x476 <__floatsisf+0x12>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	99 23       	and	r25, r25
 478:	a9 f0       	breq	.+42     	; 0x4a4 <__floatsisf+0x40>
 47a:	f9 2f       	mov	r31, r25
 47c:	96 e9       	ldi	r25, 0x96	; 150
 47e:	bb 27       	eor	r27, r27
 480:	93 95       	inc	r25
 482:	f6 95       	lsr	r31
 484:	87 95       	ror	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b7 95       	ror	r27
 48c:	f1 11       	cpse	r31, r1
 48e:	f8 cf       	rjmp	.-16     	; 0x480 <__floatsisf+0x1c>
 490:	fa f4       	brpl	.+62     	; 0x4d0 <__floatsisf+0x6c>
 492:	bb 0f       	add	r27, r27
 494:	11 f4       	brne	.+4      	; 0x49a <__floatsisf+0x36>
 496:	60 ff       	sbrs	r22, 0
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <__floatsisf+0x6c>
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <__floatsisf+0x6c>
 4a4:	88 23       	and	r24, r24
 4a6:	11 f0       	breq	.+4      	; 0x4ac <__floatsisf+0x48>
 4a8:	96 e9       	ldi	r25, 0x96	; 150
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__floatsisf+0x6a>
 4ac:	77 23       	and	r23, r23
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__floatsisf+0x54>
 4b0:	9e e8       	ldi	r25, 0x8E	; 142
 4b2:	87 2f       	mov	r24, r23
 4b4:	76 2f       	mov	r23, r22
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <__floatsisf+0x5e>
 4b8:	66 23       	and	r22, r22
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <__floatsisf+0x74>
 4bc:	96 e8       	ldi	r25, 0x86	; 134
 4be:	86 2f       	mov	r24, r22
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	2a f0       	brmi	.+10     	; 0x4d0 <__floatsisf+0x6c>
 4c6:	9a 95       	dec	r25
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	da f7       	brpl	.-10     	; 0x4c6 <__floatsisf+0x62>
 4d0:	88 0f       	add	r24, r24
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__fp_inf>:
 4da:	97 f9       	bld	r25, 7
 4dc:	9f 67       	ori	r25, 0x7F	; 127
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	08 95       	ret

000004e6 <__fp_nan>:
 4e6:	9f ef       	ldi	r25, 0xFF	; 255
 4e8:	80 ec       	ldi	r24, 0xC0	; 192
 4ea:	08 95       	ret

000004ec <__fp_pscA>:
 4ec:	00 24       	eor	r0, r0
 4ee:	0a 94       	dec	r0
 4f0:	16 16       	cp	r1, r22
 4f2:	17 06       	cpc	r1, r23
 4f4:	18 06       	cpc	r1, r24
 4f6:	09 06       	cpc	r0, r25
 4f8:	08 95       	ret

000004fa <__fp_pscB>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	14 06       	cpc	r1, r20
 504:	05 06       	cpc	r0, r21
 506:	08 95       	ret

00000508 <__fp_round>:
 508:	09 2e       	mov	r0, r25
 50a:	03 94       	inc	r0
 50c:	00 0c       	add	r0, r0
 50e:	11 f4       	brne	.+4      	; 0x514 <__fp_round+0xc>
 510:	88 23       	and	r24, r24
 512:	52 f0       	brmi	.+20     	; 0x528 <__fp_round+0x20>
 514:	bb 0f       	add	r27, r27
 516:	40 f4       	brcc	.+16     	; 0x528 <__fp_round+0x20>
 518:	bf 2b       	or	r27, r31
 51a:	11 f4       	brne	.+4      	; 0x520 <__fp_round+0x18>
 51c:	60 ff       	sbrs	r22, 0
 51e:	04 c0       	rjmp	.+8      	; 0x528 <__fp_round+0x20>
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <__fp_split3>:
 52a:	57 fd       	sbrc	r21, 7
 52c:	90 58       	subi	r25, 0x80	; 128
 52e:	44 0f       	add	r20, r20
 530:	55 1f       	adc	r21, r21
 532:	59 f0       	breq	.+22     	; 0x54a <__fp_splitA+0x10>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	71 f0       	breq	.+28     	; 0x554 <__fp_splitA+0x1a>
 538:	47 95       	ror	r20

0000053a <__fp_splitA>:
 53a:	88 0f       	add	r24, r24
 53c:	97 fb       	bst	r25, 7
 53e:	99 1f       	adc	r25, r25
 540:	61 f0       	breq	.+24     	; 0x55a <__fp_splitA+0x20>
 542:	9f 3f       	cpi	r25, 0xFF	; 255
 544:	79 f0       	breq	.+30     	; 0x564 <__fp_splitA+0x2a>
 546:	87 95       	ror	r24
 548:	08 95       	ret
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	55 1f       	adc	r21, r21
 552:	f2 cf       	rjmp	.-28     	; 0x538 <__fp_split3+0xe>
 554:	46 95       	lsr	r20
 556:	f1 df       	rcall	.-30     	; 0x53a <__fp_splitA>
 558:	08 c0       	rjmp	.+16     	; 0x56a <__fp_splitA+0x30>
 55a:	16 16       	cp	r1, r22
 55c:	17 06       	cpc	r1, r23
 55e:	18 06       	cpc	r1, r24
 560:	99 1f       	adc	r25, r25
 562:	f1 cf       	rjmp	.-30     	; 0x546 <__fp_splitA+0xc>
 564:	86 95       	lsr	r24
 566:	71 05       	cpc	r23, r1
 568:	61 05       	cpc	r22, r1
 56a:	08 94       	sec
 56c:	08 95       	ret

0000056e <__fp_zero>:
 56e:	e8 94       	clt

00000570 <__fp_szero>:
 570:	bb 27       	eor	r27, r27
 572:	66 27       	eor	r22, r22
 574:	77 27       	eor	r23, r23
 576:	cb 01       	movw	r24, r22
 578:	97 f9       	bld	r25, 7
 57a:	08 95       	ret

0000057c <__mulsf3>:
 57c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__mulsf3x>
 580:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_round>
 584:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_pscA>
 588:	38 f0       	brcs	.+14     	; 0x598 <__mulsf3+0x1c>
 58a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscB>
 58e:	20 f0       	brcs	.+8      	; 0x598 <__mulsf3+0x1c>
 590:	95 23       	and	r25, r21
 592:	11 f0       	breq	.+4      	; 0x598 <__mulsf3+0x1c>
 594:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 598:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_nan>
 59c:	11 24       	eor	r1, r1
 59e:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>

000005a2 <__mulsf3x>:
 5a2:	0e 94 95 02 	call	0x52a	; 0x52a <__fp_split3>
 5a6:	70 f3       	brcs	.-36     	; 0x584 <__mulsf3+0x8>

000005a8 <__mulsf3_pse>:
 5a8:	95 9f       	mul	r25, r21
 5aa:	c1 f3       	breq	.-16     	; 0x59c <__mulsf3+0x20>
 5ac:	95 0f       	add	r25, r21
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	55 1f       	adc	r21, r21
 5b2:	62 9f       	mul	r22, r18
 5b4:	f0 01       	movw	r30, r0
 5b6:	72 9f       	mul	r23, r18
 5b8:	bb 27       	eor	r27, r27
 5ba:	f0 0d       	add	r31, r0
 5bc:	b1 1d       	adc	r27, r1
 5be:	63 9f       	mul	r22, r19
 5c0:	aa 27       	eor	r26, r26
 5c2:	f0 0d       	add	r31, r0
 5c4:	b1 1d       	adc	r27, r1
 5c6:	aa 1f       	adc	r26, r26
 5c8:	64 9f       	mul	r22, r20
 5ca:	66 27       	eor	r22, r22
 5cc:	b0 0d       	add	r27, r0
 5ce:	a1 1d       	adc	r26, r1
 5d0:	66 1f       	adc	r22, r22
 5d2:	82 9f       	mul	r24, r18
 5d4:	22 27       	eor	r18, r18
 5d6:	b0 0d       	add	r27, r0
 5d8:	a1 1d       	adc	r26, r1
 5da:	62 1f       	adc	r22, r18
 5dc:	73 9f       	mul	r23, r19
 5de:	b0 0d       	add	r27, r0
 5e0:	a1 1d       	adc	r26, r1
 5e2:	62 1f       	adc	r22, r18
 5e4:	83 9f       	mul	r24, r19
 5e6:	a0 0d       	add	r26, r0
 5e8:	61 1d       	adc	r22, r1
 5ea:	22 1f       	adc	r18, r18
 5ec:	74 9f       	mul	r23, r20
 5ee:	33 27       	eor	r19, r19
 5f0:	a0 0d       	add	r26, r0
 5f2:	61 1d       	adc	r22, r1
 5f4:	23 1f       	adc	r18, r19
 5f6:	84 9f       	mul	r24, r20
 5f8:	60 0d       	add	r22, r0
 5fa:	21 1d       	adc	r18, r1
 5fc:	82 2f       	mov	r24, r18
 5fe:	76 2f       	mov	r23, r22
 600:	6a 2f       	mov	r22, r26
 602:	11 24       	eor	r1, r1
 604:	9f 57       	subi	r25, 0x7F	; 127
 606:	50 40       	sbci	r21, 0x00	; 0
 608:	9a f0       	brmi	.+38     	; 0x630 <__mulsf3_pse+0x88>
 60a:	f1 f0       	breq	.+60     	; 0x648 <__mulsf3_pse+0xa0>
 60c:	88 23       	and	r24, r24
 60e:	4a f0       	brmi	.+18     	; 0x622 <__mulsf3_pse+0x7a>
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	bb 1f       	adc	r27, r27
 616:	66 1f       	adc	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	91 50       	subi	r25, 0x01	; 1
 61e:	50 40       	sbci	r21, 0x00	; 0
 620:	a9 f7       	brne	.-22     	; 0x60c <__mulsf3_pse+0x64>
 622:	9e 3f       	cpi	r25, 0xFE	; 254
 624:	51 05       	cpc	r21, r1
 626:	80 f0       	brcs	.+32     	; 0x648 <__mulsf3_pse+0xa0>
 628:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_inf>
 62c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__fp_szero>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	e4 f3       	brlt	.-8      	; 0x62c <__mulsf3_pse+0x84>
 634:	98 3e       	cpi	r25, 0xE8	; 232
 636:	d4 f3       	brlt	.-12     	; 0x62c <__mulsf3_pse+0x84>
 638:	86 95       	lsr	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f7 95       	ror	r31
 642:	e7 95       	ror	r30
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	c1 f7       	brne	.-16     	; 0x638 <__mulsf3_pse+0x90>
 648:	fe 2b       	or	r31, r30
 64a:	88 0f       	add	r24, r24
 64c:	91 1d       	adc	r25, r1
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <__itoa_ncheck>:
 656:	bb 27       	eor	r27, r27
 658:	4a 30       	cpi	r20, 0x0A	; 10
 65a:	31 f4       	brne	.+12     	; 0x668 <__itoa_ncheck+0x12>
 65c:	99 23       	and	r25, r25
 65e:	22 f4       	brpl	.+8      	; 0x668 <__itoa_ncheck+0x12>
 660:	bd e2       	ldi	r27, 0x2D	; 45
 662:	90 95       	com	r25
 664:	81 95       	neg	r24
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	0c 94 37 03 	jmp	0x66e	; 0x66e <__utoa_common>

0000066c <__utoa_ncheck>:
 66c:	bb 27       	eor	r27, r27

0000066e <__utoa_common>:
 66e:	fb 01       	movw	r30, r22
 670:	55 27       	eor	r21, r21
 672:	aa 27       	eor	r26, r26
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	aa 1f       	adc	r26, r26
 67a:	a4 17       	cp	r26, r20
 67c:	10 f0       	brcs	.+4      	; 0x682 <__utoa_common+0x14>
 67e:	a4 1b       	sub	r26, r20
 680:	83 95       	inc	r24
 682:	50 51       	subi	r21, 0x10	; 16
 684:	b9 f7       	brne	.-18     	; 0x674 <__utoa_common+0x6>
 686:	a0 5d       	subi	r26, 0xD0	; 208
 688:	aa 33       	cpi	r26, 0x3A	; 58
 68a:	08 f0       	brcs	.+2      	; 0x68e <__utoa_common+0x20>
 68c:	a9 5d       	subi	r26, 0xD9	; 217
 68e:	a1 93       	st	Z+, r26
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	79 f7       	brne	.-34     	; 0x672 <__utoa_common+0x4>
 694:	b1 11       	cpse	r27, r1
 696:	b1 93       	st	Z+, r27
 698:	11 92       	st	Z+, r1
 69a:	cb 01       	movw	r24, r22
 69c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <strrev>

000006a0 <strrev>:
 6a0:	dc 01       	movw	r26, r24
 6a2:	fc 01       	movw	r30, r24
 6a4:	67 2f       	mov	r22, r23
 6a6:	71 91       	ld	r23, Z+
 6a8:	77 23       	and	r23, r23
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <strrev+0x4>
 6ac:	32 97       	sbiw	r30, 0x02	; 2
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <strrev+0x18>
 6b0:	7c 91       	ld	r23, X
 6b2:	6d 93       	st	X+, r22
 6b4:	70 83       	st	Z, r23
 6b6:	62 91       	ld	r22, -Z
 6b8:	ae 17       	cp	r26, r30
 6ba:	bf 07       	cpc	r27, r31
 6bc:	c8 f3       	brcs	.-14     	; 0x6b0 <strrev+0x10>
 6be:	08 95       	ret

000006c0 <_exit>:
 6c0:	f8 94       	cli

000006c2 <__stop_program>:
 6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__stop_program>
